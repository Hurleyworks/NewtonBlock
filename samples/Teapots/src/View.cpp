// This source file was auto-generated by ClassMate++
// Created: 25 Oct 2015 1:51:10 pm
// Copyright (c) 2015, HurleyWorks

#include "View.h"
#include "../../framework/physics/PhysicsHandler.h"

using namespace nanogui;
using namespace ci;


// ctor
View::View ()
   : nanogui::Screen()
{
   mTheme = new Theme (mNVGContext);
}

// dtor
View::~View ()
{
}

void View::create (WindowRef & ciWindow, PhysicsHandler * const handler)
{
	physics = handler;

	try
	{
		setSize(ivec2(ciWindow->getSize().x, ciWindow->getSize().y));

		initGraph(&fps, GRAPH_RENDER_FPS, "Frame Time");
		initGraph(&cpuGraph, GRAPH_RENDER_MS, "CPU Time");

		nanogui::Window * window = new nanogui::Window(this, "Physics");
		window->setPosition(ivec2(15, 15));
		window->setLayout(new GroupLayout());

		Button * b = new Button(window, "Start");
		b->setCallback([&] { physics->setEngineState(EngineState::Running); });
		b = new Button(window, "Pause");
		b->setCallback([&] { physics->setEngineState(EngineState::Paused);  });
		b = new Button(window, "Reset");
		b->setCallback([&] {physics->setEngineState(EngineState::Reset);   });

		performLayout(mNVGContext);
	}
	catch (const std::exception & e)
	{
		std::cout << e.what() << std::endl;
	}
}

void View::draw (double time)
{
   drawWidgets();
   float x = 5;
   float y = (float)mSize[1] - 40.0f;
   renderGraph (mNVGContext, x, y, &fps, nvgRGBA (128, 0, 0, 255));
   renderGraph (mNVGContext, x + 200 + 5, y, &cpuGraph, nvgRGBA (0, 128, 0, 255));
}

bool View::mouseMove (MouseEvent e)
{
   return cursorPosCallbackEvent (e.getPos().x, e.getPos().y);
}

bool View::mouseDown (MouseEvent e)
{
   if (!e.isLeft()) return false;
   return mouseButtonCallbackEvent (MOUSE_BUTTON_LEFT, PRESS, 0);
}

bool View::mouseDrag (MouseEvent e)
{
   if (!e.isLeftDown()) return false;
   return cursorPosCallbackEvent (e.getPos().x, e.getPos().y);
}

bool View::mouseUp (MouseEvent e)
{
   if (!e.isLeft()) return false;
   return mouseButtonCallbackEvent (MOUSE_BUTTON_LEFT, RELEASE, 0);
}

bool View::keyDown(KeyEvent e)
{
	if(e.getChar() > 32)
		charCallbackEvent(e.getChar());
	return keyCallbackEvent( e.getCode(), 0, PRESS, 0);
}

bool View::keyUp(KeyEvent e)
{
	return keyCallbackEvent(e.getCode(), 0, RELEASE, 0);
}

void View::updatePerfGraph (float dt, float cpuTime)
{
   updateGraph (&fps, dt);
   updateGraph (&cpuGraph, cpuTime);
}


