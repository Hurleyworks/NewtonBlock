// This header file was auto-generated by ClassMate++
// Created: 5 Nov 2015 7:19:39 am
// Copyright (c) 2015, HurleyWorks

#pragma once

#include "../../../NewtonAPI.h"
#include <memory>
#include <cstdint>
#include "PhysicsEngine.h"
#include "PhysicsScene.h"
#include "util/ActiveDispatcher.h"

struct SpaceTime;

class PhysicsHandler
{

 public:
	 PhysicsHandler() = default;
	~PhysicsHandler ();

	void init();
	
	PhysicsBodyRef addBody(const ci::TriMeshRef & triMesh,
						   const BodyDesc & bodyDesc,
						   const SpaceTime & st, 
						   bool isInstance = false);
	void removeBody(PhysicsBodyRef & pBody);

	void resetSimulation();
	bool runSimulation();

	int64_t memoryUsed() { return totalMemoryUsed; }

	PhysicsEngineRef & engine() { return physicsEngine; }
	PhysicsSceneRef & scene() { return physicsScene; }
	
 private:
	NewtonWorld * world = nullptr;
	PhysicsSceneRef physicsScene;
	PhysicsEngineRef physicsEngine;
	concurrent<ActiveDispatcher> dispatcher;

	static int64_t totalMemoryUsed;
	static void * physicsAlloc(int sizeInBytes);
	static void physicsFree(void * ptr, int sizeInBytes);

}; // end class PhysicsHandler
