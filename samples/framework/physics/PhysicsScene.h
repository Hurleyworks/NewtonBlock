// This header file was auto-generated by ClassMate++
// Created: 5 Nov 2015 9:23:18 am
// Copyright (c) 2015, HurleyWorks

#pragma once

#include "../../../NewtonAPI.h"
#include "PhysicsData.h"
#include "PhysicsBody.h"
#include "BodyHandler.h"
#include "Listeners.h"

typedef std::shared_ptr<class PhysicsScene> PhysicsSceneRef;

class PhysicsScene
{ 

 public:
	static PhysicsSceneRef create(NewtonWorld * const world) { return std::make_shared<PhysicsScene>(world); }
	typedef std::vector<PhysicsBodyRef> ReusableBodies;

 public:
	PhysicsScene(NewtonWorld * const world);
	~PhysicsScene() = default;

	PhysicsScene & operator=(const PhysicsScene&) = delete;
	PhysicsScene(const PhysicsScene&) = delete;

	PhysicsBodyRef createPhysicsBody();
	void processPhysicsBody(PhysicsBodyRef & pBody);
	void addToRecycle(PhysicsBodyRef & pBody) { if (pBody) recycled.push_back(pBody); }
	
	void shutdown() {abort = true;}
	bool getAbort() const { return abort; }

	void setEngineState(EngineState state);
	const EngineState & getEngineState() const { return engineState; }
	bool isEngineRunning() const { return engineState == EngineState::Running; }

	PhysicsBodies & getBodies() { return bodies; }
	const PhysicsBodies & getBodies() const { return bodies; }

	NewtonWorld * getWorld() { return world; }
	BodyHandler * getBodyHandler() { return &bodyHandler; }

	static void onPostPhysicsUpdate(void * const userData, float timeStep);
	static void onPrePhysicsUpdate(void * const userData, float timeStep);

 private:
	NewtonWorld * const world;
	EngineState engineState = EngineState::Paused;
	AppListener * listener = nullptr; // Newton owns it, don't delete it!
	bool abort = false;
	BodyHandler bodyHandler;
	PhysicsBodies bodies;
	ReusableBodies recycled;

	void reset();
	
}; // end class PhysicsScene

