// This header file was auto-generated by ClassMate++
// Created: 14 Nov 2014 6:15:28 pm
// Copyright (c) 2014, HurleyWorks

#pragma once

static const char* BodyTypeTable[] =
{
	"None",
	"Static",
	"Dynamic",
	"Kinematic",
	"Invalid"
};

struct BodyType
{
	enum EBodyType
	{
		None,
		Static,
		Dynamic,
		Kinematic,
		Count,
		Invalid = Count
	};

	union
	{
		EBodyType name;
		unsigned int value;
	};

	BodyType(EBodyType name) : name(name) {}
	BodyType(unsigned int value) : value(value) {}
	BodyType() : value(Invalid) {}
	operator EBodyType() const { return name; }
	const char* toString() const { return BodyTypeTable[value]; }
};

static const char* CollisionShapeTable[] =
{
	"Ball",
	"Box",
	"ConvexHull",
	"Mesh",
	"Invalid"
};

struct CollisionShape
{
	enum ECollisionShape
	{
		Ball,
		Box,
		ConvexHull,
		Mesh,
		Count,
		Invalid = Count
	};

	union
	{
		ECollisionShape name;
		unsigned int value;
	};

	CollisionShape(ECollisionShape name) : name(name) {}
	CollisionShape(unsigned int value) : value(value) {}
	CollisionShape() : value(Invalid) {}
	operator ECollisionShape() const { return name; }
	const char* toString() const { return CollisionShapeTable[value]; }
};

static const char* FlexTypeTable[] =
{
	"Rigid",
	"Cloth",
	"SoftBody",
	"Invalid"
};

struct FlexType
{
	enum EFlexType
	{
		Rigid,
		Cloth,
		SoftBody,
		Count,
		Invalid = Count
	};

	union
	{
		EFlexType name;
		unsigned int value;
	};

	FlexType(EFlexType name) : name(name) {}
	FlexType(unsigned int value) : value(value) {}
	FlexType() : value(Invalid) {}
	operator EFlexType() const { return name; }
	const char* toString() const { return FlexTypeTable[value]; }
};

static const char* EngineStateTable[] =
{
	"Running",
	"Step",
	"Paused",
	"Reset",
	"Clear",
	"Invalid"
};

struct EngineState
{
	enum EEngineState
	{
		Running,
		Step,
		Paused,
		Reset,
		Clear,
		Count,
		Invalid = Count
	};

	union
	{
		EEngineState name;
		unsigned int value;
	};

	EngineState(EEngineState name) : name(name) {}
	EngineState(unsigned int value) : value(value) {}
	EngineState() : value(Invalid) {}
	operator EEngineState() const { return name; }
	const char* toString() const { return EngineStateTable[value]; }
};


static const char* PBodyStateTable[] =
{
	"SeenByMouseRay",
	"InEngine",
	"BeingProcessed",  // by physics engine
	"HasImpulseApplied",
	"Deleted",
	"Recycled",
	"Invalid"
};

struct PBodyState
{
	enum EPBodyState
	{
		SeenByMouseRay = 1 << 0,
		InEngine = 1 << 1,
		BeingProcessed = 1 << 2,
		HasImpulseApplied = 1 << 3,
		Deleted = 1 << 4,
		Recycled = 1 << 5,
		Invalid = 1 << 6
	};

	union
	{
		EPBodyState name;
		unsigned long value;
	};

	PBodyState(EPBodyState name) : name(name) {}
	PBodyState(unsigned long value) : value(value) {}
	PBodyState() : value(0) {}
	void clear() { value = 0; }
	operator EPBodyState() const { return name; }
	unsigned long operator|=(PBodyState m) { return value |= m; }
	unsigned long operator&=(PBodyState m) { return value &= m; }
	unsigned long operator^=(PBodyState m) { return value ^= m; }
};

